// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id             String    @id @default(cuid())
  name           String
  username       String    @unique
  email          String    @unique
  password       String
  profilePicture String?
  role           Role      @default(USER)
  posts          Post[]
  followers      Follow[]  @relation(name: "followers")
  following      Follow[]  @relation(name: "following")
  refreshToken   String?
  chats          Chat[]
  sentMessages   Message[] @relation(name: "messagesSent")
  readMessages   Message[] @relation(name: "messagesRead")
}

model Post {
  id        String  @id @default(cuid())
  title     String
  content   String
  imgUrl    String?
  published Boolean @default(false)
  author    User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
}

model Follow {
  id          String @id @default(cuid())
  follower    User   @relation(fields: [followerId], references: [id], name: "followers", onDelete: Cascade)
  followerId  String
  following   User   @relation(fields: [followingId], references: [id], name: "following", onDelete: Cascade)
  followingId String

  @@unique([followerId, followingId])
}

enum ChatType {
  GROUP
  CHAT
}

model Chat {
  id           String    @id @default(cuid())
  participants User[]
  messages     Message[]
  type         ChatType
  groupName    String?
  groupAvatar  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Message {
  id        String   @id @default(cuid())
  content   String
  author    User     @relation(name: "messagesSent", fields: [authorId], references: [id])
  authorId  String
  readBy    User[]   @relation(name: "messagesRead")
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
